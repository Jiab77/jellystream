#!/usr/bin/env bash
#
# This file must be sourced
#
# Collection of Bash functions to be
# included in any scripts
#
# Made by Jiab77
#
# Version 0.0.0

# Colors
RED="\033[1;31m"
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
PURPLE="\033[1;35m"
CYAN="\033[1;36m"
WHITE="\033[1;37m"
NC="\033[0m"
NL="\n"
TAB="\t"

# Functions
function die() {
  echo -e "${NL}${WHITE}[ERROR] ${RED}$*${NC}${NL}" >&2
  exit 255
}
function log() {
  echo -e "$1"
}
function log_err() {
  echo -e "$1" >&2
}
function get_version() {
  grep -m1 "# Version" $0 | awk '{ print $3 }'
}
function show_version() {
  echo -e "${NL}Version: $(get_version)${NL}" ; exit
}
function compare_version() {
  printf '%s\n' "$@" | sort -C -V
}
function set_console_title() {
  local TITLE ; TITLE="$1"
  echo -ne "\033]0;$TITLE\007"
}
function get_env() {
  if [[ $# -eq 1 ]]; then
    printenv | sort | grep -i "$1"
  else
    printenv | sort
  fi
}
function set_env() {
  if [[ $# -eq 2 ]]; then
    export "$1"="$2"
  else
    return 1
  fi
}
function is_root() {
  [[ $(id -u) -ne 0 ]] && return 1
  return 0
}
function is_real_root() {
  [[ $(id -u) -ne 0 ]] && die "You must run this script as root or with '${YELLOW}sudo${RED}'."
  return 0
}
function clean_str() {
  [[ $# -eq 0 ]] && die "[$(basename "$0")] Too few arguments."

  local RAW_STR ; RAW_STR="$1"
  local NEW_STR ; NEW_STR="${RAW_STR//\'/}"
  echo -n "$NEW_STR"
}
function str_replace() {
  [[ $# -gt 3 ]] && die "[$(basename "$0")] Too many arguments."
  [[ $# -lt 3 ]] && die "[$(basename "$0")] Too few arguments."

  local SEARCH ; SEARCH="$1"
  local REPLACE ; REPLACE="$2"
  local SUBJECT ; SUBJECT="$3"

  echo -n "${SUBJECT//$SEARCH/$REPLACE}"
}
function str_to_lower() {
  [[ $# -eq 0 ]] && die "[$(basename "$0")] Too few arguments."

  local RAW_STR ; RAW_STR="$1"
  local NEW_STR ; NEW_STR="${RAW_STR,,}"
  echo -n "$NEW_STR"
}
function str_to_upper() {
  [[ $# -eq 0 ]] && die "[$(basename "$0")] Too few arguments."

  local RAW_STR ; RAW_STR="$1"
  local NEW_STR ; NEW_STR="${RAW_STR^^}"
  echo -n "$NEW_STR"
}
function str_lower_to_cap() {
  [[ $# -eq 0 ]] && die "[$(basename "$0")] Too few arguments."

  local RAW_STR ; RAW_STR="$1"
  local NEW_STR ; NEW_STR="${RAW_STR,}"
  echo -n "$NEW_STR"
}
function str_upper_to_cap() {
  [[ $# -eq 0 ]] && die "[$(basename "$0")] Too few arguments."

  local RAW_STR ; RAW_STR="$1"
  local NEW_STR ; NEW_STR="${RAW_STR^}"
  echo -n "$NEW_STR"
}
function set_script_dir() {
  [[ -z $SCRIPT_DIR ]] && SCRIPT_DIR="$(dirname "$0")"
}
function set_script_file() {
  [[ -z $SCRIPT_FILE ]] && SCRIPT_FILE="$(basename "$0")"
}
function set_script_name() {
  [[ -z $SCRIPT_FILE ]] && set_script_file
  [[ -n $SCRIPT_FILE && -z $SCRIPT_NAME ]] && SCRIPT_NAME="${SCRIPT_FILE/.sh/}"
}
function get_dir_name() {
  [[ -z $SCRIPT_DIR ]] && SCRIPT_DIR="$(dirname "$0")"
  echo -n "$(basename "$SCRIPT_DIR")"
}
function get_script_name() {
  if [[ -n $SCRIPT_FILE ]]; then
    echo -n "${SCRIPT_FILE/.sh/}"
  else
    SCRIPT_FILE="$(basename "$0")"
    echo -n "${SCRIPT_FILE/.sh/}"
  fi
}
function set_config_file() {
  [[ -z $SCRIPT_NAME ]] && set_script_name
  [[ -z $CONFIG_FILE ]] && CONFIG_FILE="$(get_script_name).conf"
}
function load_xdg_defs() {
  if [[ -r ~/.config/user-dirs.dirs ]]; then
    # shellcheck source=/dev/null
    source ~/.config/user-dirs.dirs
  fi
  [[ -z $XDG_CONFIG_HOME ]] && XDG_CONFIG_HOME="$HOME/.config"
}
function load_config_file() {
  [[ -z $SCRIPT_NAME ]] && set_script_name
  [[ -z $CONFIG_FILE ]] && set_config_file

  if [[ -r "$XDG_CONFIG_HOME/$CONFIG_FILE" ]]; then
    # shellcheck source=/dev/null
    source "$XDG_CONFIG_HOME/$CONFIG_FILE"
  elif [[ -r "$XDG_CONFIG_HOME/$(get_dir_name)/$CONFIG_FILE" ]]; then
    # shellcheck source=/dev/null
    source "$XDG_CONFIG_HOME/$(get_dir_name)/$CONFIG_FILE"
  elif [[ -r "$SCRIPT_DIR/$CONFIG_FILE" ]]; then
    # shellcheck source=/dev/null
    source "$SCRIPT_DIR/$CONFIG_FILE"
  fi
}
function get_mpv_version() {
  mpv --version | head -n1 | awk '{ print $2 }'
}
function get_mpv_mpris_lib() {
  local MPV_MPRIS_PATH

  [[ -z $XDG_CONFIG_HOME ]] && load_xdg_defs

  if [[ -r "$XDG_CONFIG_HOME/mpv/scripts/mpris.so" ]]; then
    MPV_MPRIS_PATH="$XDG_CONFIG_HOME/mpv/scripts/mpris.so"
  elif [[ -r /etc/mpv/scripts/mpris.so ]]; then
    MPV_MPRIS_PATH=/etc/mpv/scripts/mpris.so
  else
    MPV_MPRIS_PATH=
  fi
  echo -n "$MPV_MPRIS_PATH"
}
